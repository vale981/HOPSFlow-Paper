#+PROPERTY: header-args :session bath_memory :kernel python :pandoc no :async yes :tangle tangle/bath_memory.py

Here we scan bath memory and maybe temperature gradient later.

* Boilerplate
#+name: boilerplate
#+begin_src jupyter-python :results none
  import figsaver as fs
  import plot_utils as pu
  from hiro_models.one_qubit_model import StocProcTolerances
  from hiro_models.otto_cycle import OttoEngine
  import hiro_models.model_auxiliary as aux
  import numpy as np
  import qutip as qt
  import utilities as ut
  import stocproc
  import matplotlib.pyplot as plt
  import otto_utilities as ot

  import ray
  ray.shutdown()

  #ray.init(address='auto')
  ray.init()
  from hops.util.logging_setup import logging_setup
  import logging
  logging_setup(logging.INFO)
  plt.rcParams['figure.figsize'] = (12,4)
#+end_src

* Cycles
We take the same baseline as in [[id:c06111fd-d719-433d-a316-c163f6e1d384][cycle_shift.org]].


But we vary the cycle speed while keeping a fixed proportion
coupling-change/cycle time.
#+begin_src jupyter-python
  T = 50
  def make_model_orig(shift_c, shift_h, switch_t=6.0, switch_t_sys=None, only_cold=False):
      switch_time = switch_t / T
      switch_time_sys = (switch_t_sys if switch_t_sys else switch_t) / T

      (p_H, p_L) = ot.timings(switch_time_sys, switch_time)
      return OttoEngine(
          Î´=[0.7, 0.7],
          Ï‰_c=[1, 1],
          Ïˆ_0=qt.basis([2], [1]),
          description=f"Classic Cycle",
          k_max=4,
          bcf_terms=[5] * 2,
          truncation_scheme="simplex",
          driving_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
          thermal_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
          T=[0.5, 4],
          therm_methods=["tanhsinh", "tanhsinh"],
          Î”=1,
          num_cycles=3,
          Î˜=60,
          dt=0.001,
          timings_H=p_H,
          timings_L=p_L,
          streaming_mode=True,
          shift_to_resonance=(False, False),
          L_shift=(shift_c, 0 if only_cold else shift_h),
      )

  def make_model(Ï‰_c, T_c):
      model =  make_model_orig(0, 0, switch_t = 6)


      model.T[0] = T_c
      model.Ï‰_c = [Ï‰_c, Ï‰_c]
      return model
#+end_src

#+RESULTS:


#+begin_src jupyter-python
  Ï‰s = [round(Ï‰, 3) for Ï‰ in np.linspace(.5, 1.5, 5)]
  Ts = [round(T, 3) for T in np.linspace(.4, .6, 5)]
  Ï‰s, Ts
#+end_src

#+RESULTS:
| 0.5 | 0.75 | 1.0 | 1.25 | 1.5 |
| 0.4 | 0.45 | 0.5 | 0.55 | 0.6 |

#+begin_src jupyter-python
  import itertools
  models = [make_model(Ï‰, T) for Ï‰, T, in itertools.product(Ï‰s, Ts)]
#+end_src

#+RESULTS:


* Integrate
#+begin_src jupyter-python
  ot.integrate_online_multi(models, 30_000, increment=10_000, analyze_kwargs=dict(every=10_000))
#+end_src

* Analysis
#+begin_src jupyter-python
  models[1].T
#+end_src

#+RESULTS:
| 0.45 | 4 |

#+begin_src jupyter-python
  fig, ax = plt.subplots()
  for model in models[:22]:
      pu.plot_with_Ïƒ(models[0].t, model.interaction_power().sum_baths().integrate(model.t), ax=ax)
      print(model.power(steady_idx=2).value, model.T[0], model.Ï‰_c[0])
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mRuntimeError[0m                              Traceback (most recent call last)
  Cell [0;32mIn[19], line 3[0m
  [1;32m      1[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots()
  [1;32m      2[0m [38;5;28;01mfor[39;00m model [38;5;129;01min[39;00m models[:[38;5;241m22[39m]:
  [0;32m----> 3[0m     pu[38;5;241m.[39mplot_with_Ïƒ(models[[38;5;241m0[39m][38;5;241m.[39mt, [43mmodel[49m[38;5;241;43m.[39;49m[43minteraction_power[49m[43m([49m[43m)[49m[38;5;241m.[39msum_baths()[38;5;241m.[39mintegrate(model[38;5;241m.[39mt), ax[38;5;241m=[39max)
  [1;32m      4[0m     [38;5;28mprint[39m(model[38;5;241m.[39mpower(steady_idx[38;5;241m=[39m[38;5;241m2[39m)[38;5;241m.[39mvalue, model[38;5;241m.[39mT[[38;5;241m0[39m], model[38;5;241m.[39mÏ‰_c[[38;5;241m0[39m])

  File [0;32m~/src/two_qubit_model/hiro_models/model_base.py:560[0m, in [0;36mModel.interaction_power[0;34m(self, data, results_path, **kwargs)[0m
  [1;32m    550[0m [38;5;124;03m"""Calculates interaction power from the hierarchy data[39;00m
  [1;32m    551[0m [38;5;124;03m``data`` or, if not supplied, tries to load the online results from ``results_path``.[39;00m
  [1;32m    552[0m
  [0;32m   (...)[0m
  [1;32m    556[0m [38;5;124;03m:returns: See :any:`hopsflow.util.interaction_energy_ensemble`.[39;00m
  [1;32m    557[0m [38;5;124;03m"""[39;00m
  [1;32m    559[0m [38;5;28;01mif[39;00m data [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
  [0;32m--> 560[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtry_get_online_data[49m[43m([49m
  [1;32m    561[0m [43m        [49m[43mresults_path[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43monline_interaction_power_name[49m
  [1;32m    562[0m [43m    [49m[43m)[49m
  [1;32m    564[0m N, kwargs [38;5;241m=[39m _get_N_kwargs(kwargs, data)
  [1;32m    566[0m [38;5;28;01mreturn[39;00m hopsflow[38;5;241m.[39mhopsflow[38;5;241m.[39minteraction_energy_ensemble(
  [1;32m    567[0m     data[38;5;241m.[39mvalid_sample_iterator(data[38;5;241m.[39mstoc_traj),  [38;5;66;03m# type: ignore[39;00m
  [1;32m    568[0m     data[38;5;241m.[39mvalid_sample_iterator(data[38;5;241m.[39maux_states),  [38;5;66;03m# type: ignore[39;00m
  [0;32m   (...)[0m
  [1;32m    574[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
  [1;32m    575[0m )

  File [0;32m~/src/two_qubit_model/hiro_models/model_base.py:298[0m, in [0;36mModel.try_get_online_data[0;34m(self, path, results_path)[0m
  [1;32m    296[0m file_path [38;5;241m=[39m os[38;5;241m.[39mpath[38;5;241m.[39mjoin(path, results_path)
  [1;32m    297[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m os[38;5;241m.[39mpath[38;5;241m.[39mexists(file_path):
  [0;32m--> 298[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mNo data found under [39m[38;5;124m'[39m[38;5;132;01m{[39;00mfile_path[38;5;132;01m}[39;00m[38;5;124m'[39m[38;5;124m.[39m[38;5;124m"[39m)
  [1;32m    300[0m [38;5;28;01mreturn[39;00m hopsflow[38;5;241m.[39mutil[38;5;241m.[39mget_online_values_from_cache(file_path)

  [0;31mRuntimeError[0m: No data found under 'results/interaction_power_922443c7c9913a4ba2ddbfd8792ec54f664d39dabe87377a2ab559a7fb96e0c4.npz'.
#+end_example
[[file:./.ob-jupyter/ab84f357c909d82e98cfd1f6037a2cadeea34ed0.svg]]
:END:

#+begin_src jupyter-python
  fig, ax = plt.subplots()
  for model in models[:22]:
    pu.plot_with_Ïƒ(models[0].t, model.system_energy(), ax=ax)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e528fb8f19cb154f99249ae08b8526951dd33e15.svg]]


#+begin_src jupyter-python
  pu.plot_with_Ïƒ(models[0].t, models[0].interaction_power().sum_baths().integrate(models[0].t))
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | > | ((<matplotlib.lines.Line2D at 0x7fe105f9ab50>) <matplotlib.collections.PolyCollection at 0x7fe105f8ebb0>) |
[[file:./.ob-jupyter/4885b6623040daa45b75d948fb036da085c522c9.svg]]
:END:


#+begin_src jupyter-python
  ot.plot_power_eff_convergence(models[:10], 2)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 340x320 | with | 2 | Axes> | (<AxesSubplot: xlabel= $N$ ylabel= $P$ > <AxesSubplot: xlabel= $N$ ylabel= $\eta$ >) |
[[file:./.ob-jupyter/7afe5e1a2790bc7742a36b7e0ea2e9f183cbfe10.svg]]
:END:



#+begin_src jupyter-python
  f = plt.figure()
  a_power = f.add_subplot(121, projection="3d")
  a_efficiency = f.add_subplot(122, projection="3d")

  for ax in [a_power, a_efficiency]:
      ax.set_box_aspect(aspect=None, zoom=0.7)
      ax.set_xlabel(r"$T_c$")
      ax.set_ylabel(r"$\omega_c$")
      ax.xaxis.labelpad = 10
      ax.view_init(elev=30.0, azim=-29, roll=0)

  ot.plot_3d_heatmap(
      models[:20],
      lambda model: np.clip(-model.power(steady_idx=2).value, 0, np.inf),
      lambda model: model.T[0],
      lambda model: model.Ï‰_c[0],
      ax=a_power,
  )
  a_power.set_zlabel(r"$P$")


  ot.plot_3d_heatmap(
      models[:20],
      lambda model: np.clip(np.nan_to_num(model.efficiency(steady_idx=2).value * 100), 0, np.inf),
      lambda model: model.T[0],
      lambda model: model.Ï‰_c[0],
      ax=a_efficiency,
  )
  a_efficiency.set_zlabel(r"$\eta$")
  fs.export_fig("bath_memory_power_efficiency", x_scaling=2, y_scaling=1)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/07f1f1a19b9b33e5c9af58f399dcc478a044e932.svg]]

#+begin_src jupyter-python
  for model in models:
      ot.plot_bloch_components(model)
#+end_src

#+RESULTS:
:RESULTS:
: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/subprojects/bath_memory/plot_utils.py:38: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
:   fig, ax = setup_function()
[[file:./.ob-jupyter/290caad0bc7481e77b62e154e819a3052988a353.svg]]
[[file:./.ob-jupyter/e8b252cae59fda98a794a1ec1be821de8386bfa5.svg]]
[[file:./.ob-jupyter/7578e57c2ced88ece15aa2eb8b6b4fee31a86fa5.svg]]
[[file:./.ob-jupyter/ae083462a06f34430245f74bf8b2d505505b11eb.svg]]
[[file:./.ob-jupyter/40176c0b61de5fafbd76bae36933c18b792c162f.svg]]
[[file:./.ob-jupyter/a729c746c7584030b59c745f8a0da489ca2df9ac.svg]]
[[file:./.ob-jupyter/c5d3a792975c43c9ee13cbd35cd77d8d30d64545.svg]]
[[file:./.ob-jupyter/62cce9a31e649c315c5344a5b7ab145247956616.svg]]
[[file:./.ob-jupyter/384fce2c3614d7a3c678cdd6ce167cb7f79d9c4d.svg]]
[[file:./.ob-jupyter/38c2e2473864fc5c8f731ba6f48566030cf4a3a5.svg]]
[[file:./.ob-jupyter/d8a3afcfc35f9d9d9a40075c3fdeec8a8957cc93.svg]]
[[file:./.ob-jupyter/f14802ccf46f078c21dc8a1e26635af0f4ab39bf.svg]]
[[file:./.ob-jupyter/755d3c5d71fe3b8ec39131d3198952df31a17a7b.svg]]
[[file:./.ob-jupyter/7254949bf847513aba74771a2809597ae6b88033.svg]]
[[file:./.ob-jupyter/4590cfbf00cd6448b0b65ec24727b68ae2e21136.svg]]
[[file:./.ob-jupyter/cbfee4685e5aaecf1c4b798c4e4c233f644ec650.svg]]
[[file:./.ob-jupyter/b30c5747264f8a6194ed77ccfcdd50adeb76b51d.svg]]
[[file:./.ob-jupyter/d202e0b54a0770448a65999b95397ea5a6a44d18.svg]]
[[file:./.ob-jupyter/4b3603a3c8bbb86268330b623f48109473ec2fe9.svg]]
[[file:./.ob-jupyter/73a0bb3e1f65d2c16dce19d1cf1fd6bb0cbfd0f5.svg]]
[[file:./.ob-jupyter/3b040333e231c06777ba0e0f29b70b03a0eefd2f.svg]]
[[file:./.ob-jupyter/8079dc4f28185d6ec5de3f2d2e4b422e628a9131.svg]]
[[file:./.ob-jupyter/204937f1fb806f49218e6170aea443a25b2db635.svg]]
[[file:./.ob-jupyter/a3844b8ba0b86f0be89f72f5ccd2324ef7ea5a49.svg]]
[[file:./.ob-jupyter/8914fa0ef315a35e5864206fd7102bd509bd59e6.svg]]
:END:

* Things to Look At
- power and efficiency
- interaction power

#+PROPERTY: header-args :session otto_cycle_length :kernel python :pandoc no :async yes :tangle tangle/coupling_strength.py :noweb yes

Here we scan the cycle length and coupling strength.

* Boilerplate
#+name: boilerplate
#+begin_src jupyter-python :results none
  import figsaver as fs
  import plot_utils as pu
  from hiro_models.one_qubit_model import StocProcTolerances
  from hiro_models.otto_cycle import OttoEngine
  import hiro_models.model_auxiliary as aux
  import numpy as np
  import qutip as qt
  import utilities as ut
  import stocproc
  import matplotlib.pyplot as plt
  import otto_utilities as ot

  import ray
  ray.shutdown()

  #ray.init(address='auto')
  ray.init()
  from hops.util.logging_setup import logging_setup
  import logging
  logging_setup(logging.INFO)
  #plt.rcParams['figure.figsize'] = (12,4)
#+end_src

* Cycles
We take the same baseline as in [[id:c06111fd-d719-433d-a316-c163f6e1d384][cycle_shift.org]].

But we vary the cycle speed while keeping a fixed proportion
coupling-change/cycle time.

#+NAME: make-model
#+begin_src jupyter-python :results none
  def make_model(Θ, δ):
      (p_H, p_L) = ot.timings(.06, .06)
      return OttoEngine(
            δ=[δ, δ],
            ω_c=[1, 1],
            ψ_0=qt.basis([2], [1]),
            description=f"Classic Cycle",
            k_max=4,
            bcf_terms=[5] * 2,
            truncation_scheme="simplex",
            driving_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
            thermal_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
            T=[0.5, 4],
            therm_methods=["tanhsinh", "tanhsinh"],
            Δ=1,
            num_cycles=3 if δ >= .25 else 5,
            Θ=Θ,
            dt=0.001,
            timings_H=p_H,
            timings_L=p_L,
            streaming_mode=True,
            shift_to_resonance=(False, False),
            L_shift=(0, 0),
        )
#+end_src


#+begin_src jupyter-python
  δs = [.2] + [round(δ, 3) for δ in np.linspace(.3, .7, 5)]
  Θs = [round(Θ, 3) for Θ in np.linspace(20, 80, 5)][1:]
  δs, Θs
#+end_src

#+RESULTS:
|  0.2 |  0.3 |  0.4 |  0.5 | 0.6 | 0.7 |
| 35.0 | 50.0 | 65.0 | 80.0 |     |     |

#+begin_src jupyter-python
  import itertools
  models = [make_model(Θ, δ) for Θ, δ, in itertools.product(Θs, δs)]
#+end_src

#+RESULTS:


* Integrate
#+begin_src jupyter-python
  ot.integrate_online_multi(models, 50_000, increment=10_000, analyze_kwargs=dict(every=10_000))
#+end_src

#+begin_src jupyter-python
  aux.import_results(other_data_path="taurus/.data", other_results_path="taurus/results", models_to_import=models)
#+end_src

* Analysis
#+begin_src jupyter-python
    ot.plot_energy(models[5])
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 340x320 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Energy | > |
[[file:./.ob-jupyter/3da29ea23fbb86d0c258f8b077c4568444a3894e.svg]]
:END:


#+begin_src jupyter-python
  f_power = plt.figure()
  a_power = f_power.add_subplot(1, 1, 1, projection="3d")
  f_work = plt.figure()
  a_work = f_work.add_subplot(1, 1, 1, projection="3d")
  f_efficiency = plt.figure()
  a_efficiency = f_efficiency.add_subplot(1, 1, 1, projection="3d")
  f_mean_inter_power = plt.figure()
  a_mean_inter_power = f_mean_inter_power.add_subplot(1, 1, 1, projection="3d")
  f_mean_system_power = plt.figure()
  a_mean_system_power = f_mean_system_power.add_subplot(1, 1, 1, projection="3d")

  for ax in [a_power, a_efficiency, a_work, a_mean_inter_power, a_mean_system_power]:
      ax.set_box_aspect(aspect=None, zoom=.7)
      ax.set_xlabel(r"$\delta$")
      ax.set_ylabel(r"$\Theta$")
      ax.xaxis.labelpad = 10
      ax.view_init(elev=30.0, azim=-29, roll=0)


  ot.plot_3d_heatmap(
      models,
      lambda model: np.clip(
          np.nan_to_num(model.efficiency(steady_idx=-2).value * 100), 0, np.inf
      ),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_efficiency,
  )
  a_efficiency.set_zlabel(r"$\eta$")

  ot.plot_3d_heatmap(
      models,
      lambda model: np.clip(-model.power(steady_idx=-2).value * 1000, 0, np.inf),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_power,
  )
  a_power.set_zlabel(r"$\bar{P}/10^{-3}$")
  a_power.zaxis.labelpad = 8

  ot.plot_3d_heatmap(
      models,
      lambda model: np.clip(
          ot.val_relative_to_steady(model, model.interaction_power().sum_baths(), 2)[
              1
          ].mean.value
          ,* 1000,
          0,
          np.inf,
      ),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_mean_inter_power,
  )
  a_mean_inter_power.set_zlabel(r"$-\bar{P}_\mathrm{int}/10^{-3}$")
  a_mean_inter_power.zaxis.labelpad = 8
  a_mean_inter_power.view_init(elev=30.0, azim=110, roll=0)

  ot.plot_3d_heatmap(
      models,
      lambda model: np.clip(
          -ot.val_relative_to_steady(model, model.system_power().sum_baths(), 2)[
              1
          ].mean.value
          ,* 1000,
          0,
          np.inf,
      ),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_mean_system_power,
  )
  a_mean_system_power.set_zlabel(r"$\bar{P}_\mathrm{sys}/10^{-3}$")
  a_mean_system_power.zaxis.labelpad = 8

  ot.plot_3d_heatmap(
      models,
      lambda model: np.clip(-model.power(steady_idx=-2).value * model.Θ, 0, np.inf),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_work,
  )
  a_work.set_zlabel(r"$W$")
  a_work.zaxis.labelpad = 8


  plt.tight_layout()

  fs.export_fig("coupling_speed_scan_power", x_scaling=1, y_scaling=1, fig=f_power)
  fs.export_fig("coupling_speed_scan_work", x_scaling=1, y_scaling=1, fig=f_work)
  fs.export_fig(
      "coupling_speed_scan_efficiency", x_scaling=1, y_scaling=1, fig=f_efficiency
  )
  fs.export_fig(
      "coupling_speed_scan_interpower", x_scaling=1, y_scaling=1, fig=f_mean_inter_power
  )
  fs.export_fig(
      "coupling_speed_scan_syspower", x_scaling=1, y_scaling=1, fig=f_mean_system_power
  )
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/a4fded1708431af976271eb4a82f9e521a57a7eb.svg]]
[[file:./.ob-jupyter/55fb3469794892bbb3e378daca3aa6d7b600b239.svg]]
[[file:./.ob-jupyter/f8981aa4603d7ef3a58555400d2a24873608ab8c.svg]]
[[file:./.ob-jupyter/54d2889e653fd41dab4c17e9cc71bd7c03007295.svg]]
[[file:./.ob-jupyter/6ffe6a67ffb005d5f582305846cdce6df560a1e7.svg]]
:END:
#+begin_src jupyter-python
  f_mean_system_power = plt.figure()
  a_mean_system_power = f_mean_system_power.add_subplot(1, 1, 1)

  (_, _, (c_mean_sytem_power, data_mean_system_power)) = ot.plot_contour(
        models,
        lambda model:
            -ot.val_relative_to_steady(model, model.system_power().sum_baths(), 2)[
                1
            ].mean.value,
        lambda model: model.δ[0],
        lambda model: model.Θ,
        ax=a_mean_system_power,
    )
  a_mean_system_power.set_title(r"$\bar{P}_\mathrm{sys}/\Omega^2$")
#+end_src

#+RESULTS:
:RESULTS:
: Text(0.5, 1.0, '$\\bar{P}_\\mathrm{sys}/\\Omega^2$')
[[file:./.ob-jupyter/8f10f47f9025c26b3b30a075c89c5cdc751d1e00.svg]]
:END:


#+begin_src jupyter-python
  f_power = plt.figure()
  a_power = f_power.add_subplot(1, 1, 1)
  f_work = plt.figure()
  a_work = f_work.add_subplot(1, 1, 1)
  f_efficiency = plt.figure()
  a_efficiency = f_efficiency.add_subplot(1, 1, 1)
  f_mean_inter_power = plt.figure()
  a_mean_inter_power = f_mean_inter_power.add_subplot(1, 1, 1)
  f_mean_system_power = plt.figure()
  a_mean_system_power = f_mean_system_power.add_subplot(1, 1, 1)

  axs = [a_power, a_efficiency, a_work, a_mean_inter_power, a_mean_system_power]
  figs = [f_power, f_efficiency, f_work, f_mean_inter_power, f_mean_system_power]
  for ax in axs:
      ax.set_xlabel(r"$\delta$")
      ax.set_ylabel(r"$\Theta$")


  (_, _, (c_efficiency, data_efficiency)) = ot.plot_contour(
      models,
      lambda model: np.clip(
          np.nan_to_num(model.efficiency(steady_idx=-2).value * 100), 0, np.inf
      ),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_efficiency,
  )
  a_efficiency.set_title(r"$\eta$")

  (_, _, (c_power, data_power)) =ot.plot_contour(
      models,
      lambda model: np.clip(-model.power(steady_idx=-2).value, 0, np.inf),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_power,
  )
  a_power.set_title(r"$\bar{P}/\Omega^2$")

  (_, _, (c_mean_inter_power, data_mean_inter_power)) = ot.plot_contour(
      models,
      lambda model: np.clip(
          ot.val_relative_to_steady(model, model.interaction_power().sum_baths(), 2)[
              1
          ].mean.value,
          0,
          np.inf,
      ),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_mean_inter_power,
  )
  a_mean_inter_power.set_title(r"$-\bar{P}_\mathrm{int}/\Omega^2$")

  (_, _, (c_mean_system_power, data_mean_system_power)) = ot.plot_contour(
      models,
      lambda model:
          -ot.val_relative_to_steady(model, model.system_power().sum_baths(), 2)[
              1
          ].mean.value,
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_mean_system_power,
  )
  a_mean_system_power.set_title(r"$\bar{P}_\mathrm{sys}/\Omega^2$")

  (_, _, (c_work, data_work)) = ot.plot_contour(
      models,
      lambda model: np.clip(-model.power(steady_idx=-2).value * model.Θ, 0, np.inf),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_work,
  )
  a_work.set_title(r"$W/\Omega$")


  plt.tight_layout()
  contours = [c_power, c_efficiency, c_work, c_mean_inter_power, c_mean_system_power]
  datas = [data_power, data_efficiency, data_work, data_mean_inter_power, data_mean_system_power]

  for fig, contour in zip(figs, contours):
      fig.colorbar(contour)

  fs.export_fig("coupling_speed_scan_power_contour", x_scaling=1, y_scaling=1, fig=f_power, data=data_power)
  fs.export_fig("coupling_speed_scan_work_contour", x_scaling=1, y_scaling=1, fig=f_work, data=data_work)
  fs.export_fig(
      "coupling_speed_scan_efficiency_contour", x_scaling=1, y_scaling=1, fig=f_efficiency, data=data_efficiency
  )
  fs.export_fig(
      "coupling_speed_scan_interpower_contour", x_scaling=1, y_scaling=1, fig=f_mean_inter_power, data=data_mean_inter_power
  )
  fs.export_fig(
      "coupling_speed_scan_syspower_contour", x_scaling=1, y_scaling=1, fig=f_mean_system_power, data=data_mean_system_power
  )
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/67bf5c82306b318ce650433463e13e7dee354bd5.svg]]
[[file:./.ob-jupyter/7e340c9e451d8dbd012b84be33801965f96122ac.svg]]
[[file:./.ob-jupyter/32153d4bce153c132414c148d3e489130fdc87b3.svg]]
[[file:./.ob-jupyter/6218def4404f7bf670a4d3e75c28d07ac6d9f101.svg]]
[[file:./.ob-jupyter/806dbc342f97c822035fcf647f53b26b7cd846f0.svg]]
:END:

#+begin_src jupyter-python
  f = plt.figure()
  a_power = f.add_subplot(121, projection="3d")
  a_efficiency = f.add_subplot(122, projection="3d")
  for ax in [a_power, a_efficiency]:
      ax.set_box_aspect(aspect=None, zoom=0.7)
      ax.set_xlabel(r"$\delta$")
      ax.set_ylabel(r"$\Theta$")

  ot.plot_3d_heatmap(
      models,
      lambda model: np.divide(np.abs(model.power(steady_idx=-2).σ), np.abs(model.power(steady_idx=-2).value)),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_power,
  )
  a_power.set_zlabel(r"$\sigma_P/|P|$")


  ot.plot_3d_heatmap(
      models,
      lambda model: np.divide(np.clip(np.nan_to_num(model.efficiency(steady_idx=-2).σ * 100), 0, np.inf), np.abs(model.efficiency(steady_idx=-2).value * 100)),
      lambda model: model.δ[0],
      lambda model: model.Θ,
      ax=a_efficiency,
  )
  a_efficiency.set_zlabel(r"$\sigma_\eta/|\eta|$")
  fs.export_fig("coupling_speed_scan_power_efficiency_uncertainty")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/43634f8b38594ef86dce9c67d4da46131bd0ad48.svg]]



* Weak Coupling Limit
#+begin_src jupyter-python :tangle tangle/weak_coupling_model.py
  <<boilerplate>>
  <<make-model>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results none :tangle tangle/weak_coupling_model.py
  weak_coupling_model = make_model(50, .2)
  weak_coupling_model.num_cycles = 5
#+end_src


** Integrate
#+begin_src jupyter-python  :tangle tangle/weak_coupling_model.py
  ot.integrate_online(weak_coupling_model, 50_000, analyze_kwargs=dict(every=10_000))
#+end_src


#+begin_src jupyter-python :tangle no
  aux.import_results(other_data_path="taurus/.data", other_results_path="taurus/results", models_to_import=[weak_coupling_model], force=True)
#+end_src

#+RESULTS:
#+begin_example
  [WARNING root                      855863] Importing taurus/.data/f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49/_d/f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_d48f009a0d8d35cbd63b22cfaca9a422_1.h5 to .data/f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49/_d/f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_d48f009a0d8d35cbd63b22cfaca9a422_1.h5.
  [WARNING root                      855863] The model description is 'Classic Cycle'.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_40000.npz.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_20000.npz.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_10000.npz.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_50000.npz.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz.
  [WARNING root                      855863] Importing taurus/results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/flow_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_30000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_40000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_10000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_20000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_50000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_30000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_20000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_40000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_10000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_30000.npz.
  [WARNING root                      855863] Importing taurus/results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/interaction_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_50000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_20000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_50000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_30000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_40000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_10000.npz.
  [WARNING root                      855863] Importing taurus/results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_40000.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_20000.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_10000.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_30000.npz.
  [WARNING root                      855863] Importing taurus/results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49.npz to results/system_power_f9d1bda1cf5d0f7419d0cc1b1b5db082c13604538255d3dfbc05af9f0d354f49_50000.npz.
#+end_example

** Analysis
#+begin_src jupyter-python
  ot.plot_energy(weak_coupling_model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Energy | > |
[[file:./.ob-jupyter/481435fea60cb1e894453c732dac9705c7a9f35f.svg]]
:END:

#+begin_src jupyter-python
weak_coupling_model.power(steady_idx=-2).value
#+end_src

#+RESULTS:
: -0.003196289993151554

#+begin_src jupyter-python
weak_coupling_model.efficiency(steady_idx=-2).value
#+end_src

#+RESULTS:
: 0.41954860019427215


#+begin_src jupyter-python
  weak_coupling_model.strobe
#+end_src

#+RESULTS:
| array | ((0 50 100 150 200 250)) | array | ((0 1000 2001 3003 4003 5003)) |

* Things to Look At
- power and efficiency
- magnitude of interaction energies
- magnitude of interaction powers

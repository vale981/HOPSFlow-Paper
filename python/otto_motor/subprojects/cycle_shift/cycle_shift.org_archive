#    -*- mode: org -*-


Archived entries from file /home/hiro/Documents/master/eflow_paper/python/otto_motor/subprojects/cycle_shift/cycle_shift.org


* Overlapping the Phases
:PROPERTIES:
:ARCHIVE_TIME: 2023-05-11 Thu 12:33
:ARCHIVE_FILE: ~/Documents/master/eflow_paper/python/otto_motor/subprojects/cycle_shift/cycle_shift.org
:ARCHIVE_CATEGORY: cycle_shift
:END:
What happedn
#+begin_src jupyter-python
  T = 50
  def overlap(shift_model, N, step, switch_t=3.):
      switch_time = switch_t / T
      (p_H, p_L) = ot.timings(switch_time, switch_time)
      next_model = shift_model.copy()

      #next_model.timings_H=p_H
      next_model.timings_L=p_L

      (a, b, c, d) = next_model.timings_L[0]
      (e, f, g, h) = next_model.timings_L[1]
      next_step = step * N
      (s1, s2) = next_model.L_shift


      next_model.L_shift = (s1 + next_step, s2 - next_step)
      next_model.timings_L = (
          (a - 2 * next_step, b - 2 * next_step, c, d),
          (e, f, g + 2 * next_step, h + 2 * next_step),
      )
      return next_model


  def overlap_cold(shift_model, N, step):
      next_model = shift_model.copy()
      (a, b, c, d) = next_model.timings_L[0]
      (e, f, g, h) = next_model.timings_L[1]
      next_step = step * N
      (s1, s2) = next_model.L_shift
      next_model.L_shift = (s1 + next_step, s2 - next_step)
      next_model.timings_L = (
          (a - 2 * next_step, b - 2 * next_step, c - next_step, d - next_step),
          (e + next_step, f + next_step, g + 2 * next_step, h + 2 * next_step),
      )
      return next_model


  Ns = list(range(1, 4))[:1]
  overlap_models = [overlap(best_shift_model, N, sc.make_step()) for N in Ns]
  overlap_models = [overlap_cold(best_shift_model, N, sc.make_step()) for N in Ns]
  new_step_size = 6
  mini_step = (new_step_size / 10)
  print(mini_step)
  overlap_models = [overlap(best_shift_model, N, mini_step, new_step_size) for N in Ns]
#+end_src

#+RESULTS:
: 0.6

#+begin_src jupyter-python :tangle no
  ot.plot_cycles([overlap_models[0]], legend=True)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 340x320 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/380373af099bbf5309b03dbaff5557e05ac11ed8.svg]]
:END:

** Integrate
#+begin_src jupyter-julia
  all_overlap_models = [best_shift_model, *overlap_models]
#+end_src


#+begin_src jupyter-python
  ot.integrate_online_multi(overlap_models, 80_000, increment=10_000, analyze_kwargs=dict(every=10_000))
#+end_src

** Analysis
#+begin_src jupyter-python :tangle no
  fig, ax = plt.subplots()
  t = np.linspace(0, all_overlap_models[0].Î˜, 1000)
  ax.plot(t, all_overlap_models[0].coupling_operators[0].operator_norm(t), color="C1", linewidth=1, label="Shifted")
  ax.plot(t, all_overlap_models[0].coupling_operators[1].operator_norm(t), color="C1", linestyle="--", linewidth=1)
  ax.plot(t, all_overlap_models[1].coupling_operators[0].operator_norm(t), color="C2", linewidth=1, label="Shifted with Overlap")
  ax.plot(t, all_overlap_models[1].coupling_operators[1].operator_norm(t), color="C2", linestyle="--", linewidth=1)

  ax.set_xlabel(r"$\tau$")
  ax.set_ylabel(r"$||L_{h/c}||$")
  ax.legend()
  fs.export_fig("cycle_shift_shift_vs_overlap", y_scaling=.6)
  #ot.plot_cycles(all_overlap_models[0:2], legend=True)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[58], line 2[0m
: [1;32m      1[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots()
: [0;32m----> 2[0m t [38;5;241m=[39m np[38;5;241m.[39mlinspace([38;5;241m0[39m, [43mall_overlap_models[49m[[38;5;241m0[39m][38;5;241m.[39mÎ˜, [38;5;241m1000[39m)
: [1;32m      3[0m ax[38;5;241m.[39mplot(t, all_overlap_models[[38;5;241m0[39m][38;5;241m.[39mcoupling_operators[[38;5;241m0[39m][38;5;241m.[39moperator_norm(t), color[38;5;241m=[39m[38;5;124m"[39m[38;5;124mC1[39m[38;5;124m"[39m, linewidth[38;5;241m=[39m[38;5;241m1[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mShifted[39m[38;5;124m"[39m)
: [1;32m      4[0m ax[38;5;241m.[39mplot(t, all_overlap_models[[38;5;241m0[39m][38;5;241m.[39mcoupling_operators[[38;5;241m1[39m][38;5;241m.[39moperator_norm(t), color[38;5;241m=[39m[38;5;124m"[39m[38;5;124mC1[39m[38;5;124m"[39m, linestyle[38;5;241m=[39m[38;5;124m"[39m[38;5;124m--[39m[38;5;124m"[39m, linewidth[38;5;241m=[39m[38;5;241m1[39m)
:
: [0;31mNameError[0m: name 'all_overlap_models' is not defined
[[file:./.ob-jupyter/7347018a6eb9899c10d9726fcc5d9b94fae25a6d.svg]]
:END:


#+begin_src jupyter-python
  ot.plot_power_eff_convergence(all_overlap_models, 2)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 340x320 | with | 2 | Axes> | (<AxesSubplot: xlabel= $N$ ylabel= $P$ > <AxesSubplot: xlabel= $N$ ylabel= $\eta$ >) |
[[file:./.ob-jupyter/e01f809855125e962fb4f56975fb4833b122dd1a.svg]]
:END:

#+begin_src jupyter-python
  f, a= ot.plot_energy(all_overlap_models[-1])
  a.plot(model.t, model.coupling_operators[0].operator_norm(model.t))
  a.plot(model.t, model.coupling_operators[1].operator_norm(model.t))
  a.plot(model.t, model.system.operator_norm(model.t))
#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7ff2b6947400> |
[[file:./.ob-jupyter/6f6fb7a34b89a008d51117d01b0dba6e6341fd8c.svg]]
:END:


#+begin_src jupyter-julia
  [model.power(steady_idx=2).value / best_shift_model.power(steady_idx=2).value for model in all_overlap_models]
#+end_src

#+RESULTS:
| 1.0 | 1.3236593973330115 |

#+begin_src jupyter-julia
  [model.efficiency(steady_idx=2).value / best_shift_model.efficiency(steady_idx=2).value for model in all_overlap_models]
#+end_src

#+RESULTS:
| 1.0 | 1.1230706203655971 |

#+begin_src jupyter-julia
  [model.power(steady_idx=2).N  for model in all_overlap_models]
#+end_src

#+RESULTS:
| 80000 | 80000 |


#+begin_src jupyter-python
  ot.plot_powers_and_efficiencies([0] + Ns, all_overlap_models)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 340x320 | with | 2 | Axes> | <AxesSubplot: | ylabel= | $-\bar{P}$ | > |
[[file:./.ob-jupyter/0b9adf725182e7385744287f98375c8b39c3471b.svg]]
:END:

#+begin_src jupyter-python
  f, a = plt.subplots()
  a.axhline(0, color="lightgrey")
  for model, label in zip(all_overlap_models[:2], ["Shifted", "Shifted with Overlap"]):
      _, _, lines = pu.plot_with_Ïƒ(model.t, model.interaction_power().sum_baths().integrate(model.t), ax=a, label=fr"$W_\mathrm{{int}}$ {label}")
      pu.plot_with_Ïƒ(model.t, model.system_power().integrate(model.t), ax=a, color=lines[0][0].get_color(), linestyle="--", label=fr"$W_\mathrm{{sys}}$ {label}")
  a.set_ylabel(r"$W_{\mathrm{int/sys}}$")
  a.set_xlabel(r"$\tau$")
  a.legend()
  fs.export_fig("cycle_shift_shift_vs_overlap_power", x_scaling=2, y_scaling=.6)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a4e92f194bddc790d251d8118f1bf7592fb58bb7.svg]]

We see that the power boost is solely due to the interaction
modulation.

#+begin_src jupyter-python
    fig, ax =ot.plot_steady_energy_changes(all_overlap_models, 2, label_fn=(lambda m: ["without overlap", "with overlap"][all_overlap_models.index(m)]))
    ax.legend(loc="lower left")

    fs.export_fig("overlap_energy_change", y_scaling=.9)

    fig, ax =ot.plot_steady_work_baths(all_overlap_models, 2, label_fn=(lambda m: ["without overlap", "with overlap"][all_overlap_models.index(m)]))
    ax.legend(loc="lower left")

    fs.export_fig("overlap_energy_change_hot_cold", y_scaling=.9)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[206], line 1[0m
: [0;32m----> 1[0m fig, ax [38;5;241m=[39mot[38;5;241m.[39mplot_steady_energy_changes([43mall_overlap_models[49m, [38;5;241m2[39m, label_fn[38;5;241m=[39m([38;5;28;01mlambda[39;00m m: [[38;5;124m"[39m[38;5;124mwithout overlap[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mwith overlap[39m[38;5;124m"[39m][all_overlap_models[38;5;241m.[39mindex(m)]))
: [1;32m      2[0m ax[38;5;241m.[39mlegend(loc[38;5;241m=[39m[38;5;124m"[39m[38;5;124mlower left[39m[38;5;124m"[39m)
: [1;32m      4[0m fs[38;5;241m.[39mexport_fig([38;5;124m"[39m[38;5;124moverlap_energy_change[39m[38;5;124m"[39m, y_scaling[38;5;241m=[39m[38;5;241m.9[39m)
:
: [0;31mNameError[0m: name 'all_overlap_models' is not defined
:END:


#+begin_src jupyter-python
  r = pu.plot_with_Ïƒ(all_overlap_models[-1].t, all_overlap_models[-1].interaction_energy().for_bath(0))
  # a.plot(all_overlap_models[-1].t, all_overlap_models[-1].H(all_overlap_models[-1].t)[:, 0,0])
  r[1].plot(all_overlap_models[-1].t, all_overlap_models[-1].coupling_operators[0].operator_norm(all_overlap_models[-1].t) / 5)
  r[1].plot(all_overlap_models[-1].t, all_overlap_models[-1].coupling_operators[1].operator_norm(all_overlap_models[-1].t) / 5)
  r[1].set_xlim((model.Î˜*2, model.Î˜*2+15))
#+end_src

#+RESULTS:
:RESULTS:
| 120.0 | 135.0 |
[[file:./.ob-jupyter/05702081169b9057efd24c51303402f7e774030e.svg]]
:END:


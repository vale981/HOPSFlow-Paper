#+PROPERTY: header-args :session otto_baseline :kernel python :pandoc no :async yes :tangle otto_baseline.py

* Boilerplate
#+name: boilerplate
#+begin_src jupyter-python :results none
    import figsaver as fs
    import plot_utils as pu
    from hiro_models.one_qubit_model import StocProcTolerances
    from hiro_models.otto_cycle import OttoEngine
    import hiro_models.model_auxiliary as aux
    import numpy as np
    import qutip as qt
    import utilities as ut
    import stocproc
    import matplotlib.pyplot as plt
    import otto_utilities as ot

    import ray
    ray.shutdown()

    #ray.init(address='auto')
    ray.init()
    from hops.util.logging_setup import logging_setup
    import logging
    logging_setup(logging.INFO)
    plt.rcParams['figure.figsize'] = (12,4)
#+end_src

* Model: Baseline
:PROPERTIES:
:header-args: :tangle baseline.py :session baseline :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:
: 2022-12-10 18:36:09,974       INFO worker.py:956 -- Connecting to existing Ray cluster at address: 10.0.0.102:6379

#+begin_src jupyter-python
  model = OttoEngine(
      Î´=[0.4, 0.4],
      Ï‰_c=[1, 1],
      Ïˆ_0=qt.basis([2], [1]),
      description=f"A basic near-markovian, weakly coupled Otto Cycle that actually works.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      T=[1, 10],
      therm_methods=["tanhsinh", "fft"],
      Î”=1,
      num_cycles=5,
      Î˜=1.5 / 0.05,
      dt=0.001,
      timings_H=(0, 0.1, 0.5, 0.6),
      timings_L=((0.6, 0.7, 0.9, 1), (0.1, 0.2, 0.4, 0.5)),
      streaming_mode=True,
      # solver_args=dict(rtol=1e-3, atol=1e-3)
  )
#+end_src

#+RESULTS:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,075 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:
: [2m[36m(pid=gcs_server)[0m [2022-12-10 18:34:40,076 E 836176 836176] (gcs_server) gcs_server.cc:283: Failed to get the resource load: GrpcUnavailable: RPC Error message: Socket closed; RPC Error details:


#+begin_src jupyter-python :tangle no
  ot.plot_cycle(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/b9c6fe129cc6f48b499ba5507d42fad2b917e830.svg]]
:END:


#+begin_src jupyter-python :tangle no
  ot.integrate_online(model, 5000, analyze_kwargs=dict(every=100))
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[1], line 1[0m
: [0;32m----> 1[0m [43mot[49m[38;5;241m.[39mintegrate_online(model, [38;5;241m5000[39m, analyze_kwargs[38;5;241m=[39m[38;5;28mdict[39m(every[38;5;241m=[39m[38;5;241m100[39m))
:
: [0;31mNameError[0m: name 'ot' is not defined
:END:




#+begin_example
  100% 1314/1314 [31:39<00:00,  1.45s/it]
  [INFO    hops.core.integration     177538] Choosing the nonlinear integrator.
  [INFO    root                      177538] Starting analysis process.
  [INFO    root                      177538] Started analysis process with pid 218822.
  [INFO    hops.core.hierarchy_data  177538] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_b28fda1ae09e50be64694fbb2886a0c43f329c2036a918a72db2346af5779470.fifo
  [INFO    hops.core.integration     177538] Using 32 integrators.
  [INFO    hops.core.integration     177538] Some 0 trajectories have to be integrated.
  [INFO    hops.core.integration     177538] Using 1820 hierarchy states.
  0it [00:00, ?it/s]
  [2m[36m(raylet)[0m Spilled 2746 MiB, 1285 objects, write throughput 121 MiB/s. Set RAY_verbose_spill_logs=0 to disable this message.
#+end_example

** Results
:PROPERTIES:
:header-args:  :session baseline_res :noweb yes :async yes
:END:

#+begin_src jupyter-python
    import otto_utilities as ot
    from baseline import model

    ot.plot_energy(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Energy | > |
[[file:./.ob-jupyter/35dcfbedcee78b470c1b319c79069c0e810714a4.svg]]
:END:



#+begin_src jupyter-python
  model.efficiency(), model.power()
#+end_src

#+RESULTS:
| EnsembleValue | (((4999 0.30111959935298505 0.004893266566388082))) | EnsembleValue | (((4999 -0.002945848125810441 2.901871200949723e-05))) |


#+begin_src jupyter-python
    ot.full_report(model)
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/0852c11e266a37e92a5294569e34abb5695b2ecd.svg]]
: [2m[36m(raylet)[0m Spilled 2746 MiB, 1285 objects, write throughput 121 MiB/s. Set RAY_verbose_spill_logs=0 to disable this message.
:END:
:RESULTS:
: \(P=-0.002946\pm 0.000029\)
: \(\eta=30.1\pm 0.5\)
[[file:./.ob-jupyter/8886ba10a0709961381a019dc9c7fa14126142c2.svg]]
[[file:./.ob-jupyter/ff76c13b95ea6b171bfd66927097c017aea9efd9.svg]]
:END:

* Model: Baseline, continously coupled
:PROPERTIES:
:header-args: :tangle baseline_cc.py :session baseline_cc :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output without coupling modulation.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  model = OttoEngine(
      Î´=[0.4, 0.4],
      Ï‰_c=[1, 1],
      Ïˆ_0=qt.basis([2], [1]),
      description=f"A basic near-markovian, weakly coupled Otto Cycle that actually works.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      T=[1, 10],
      therm_methods=["tanhsinh", "fft"],
      Î”=1,
      num_cycles=5,
      Î˜=1.5 / 0.05,
      dt=0.001,
      timings_H=(0, 0.1, 0.5, 0.6),
      timings_L=(None, None),
      streaming_mode=True,
  )

  ot.plot_cycle(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/46af558100f1bf6a8d5d1a125a7e3116ba1d2dff.svg]]
:END:


#+begin_src jupyter-python :tangle no
  ot.integrate_online(model, 5000, analyze_kwargs=dict(every=500))
#+end_src

#+RESULTS:
#+begin_example
  [INFO    hops.core.integration     220084] Choosing the nonlinear integrator.
  [INFO    root                      220084] Starting analysis process.
  [INFO    root                      220084] Started analysis process with pid 224653.
  [INFO    hops.core.hierarchy_data  220084] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_f0cbfe14927cd3391051a14d81391c4135087e9e3a2908e3242a8393e98e0640.fifo
  [INFO    hops.core.integration     220084] Using 32 integrators.
  [INFO    hops.core.integration     220084] Some 4925 trajectories have to be integrated.
  [INFO    hops.core.integration     220084] Using 1820 hierarchy states.
   31% 1529/4925 [39:31<1:27:46,  1.55s/it][2m[36m(raylet)[0m Spilled 2746 MiB, 1285 objects, write throughput 121 MiB/s. Set RAY_verbose_spill_logs=0 to disable this message.
  100% 4925/4925 [1:27:30<00:00,  1.07s/it]
#+end_example

** Results
:PROPERTIES:
:header-args:  :session baseline_cc_res :noweb yes :async yes
:END:

#+begin_src jupyter-python
    import otto_utilities as ot
    from baseline_cc import model

    ot.plot_energy(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Energy | > |
[[file:./.ob-jupyter/8dcf44f140c595dc41af80bf639a4f09febd3ecd.svg]]
[[file:./.ob-jupyter/6b12c2b534b24a0f30d232e3f27f9224e1fff5d3.svg]]
:END:


#+begin_src jupyter-python
  model.efficiency().value, model.power().value
#+end_src

#+RESULTS:
| 0.04458645456091148 | -0.001717584422747308 |


#+begin_src jupyter-python
    ot.full_report(model)
#+end_src

#+RESULTS:
:RESULTS:
: \(P=-0.001718\pm 0.000022\)
: \(\eta=4.46\pm 0.09\)
[[file:./.ob-jupyter/eefdee2f2a0ee389678d59da69931e4273c3099e.svg]]
[[file:./.ob-jupyter/7a9f9b4f3bfcdae6c575cdf9a48181f7b8bdf3a0.svg]]
:END:

* Model: Baseline Without Resonance
:PROPERTIES:
:header-args: :tangle baseline_noshift.py :session baseline_noshift :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output but without resonance.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  model = OttoEngine(
        Î´=[0.4, 0.4],
        Ï‰_c=[1, 1],
        Ïˆ_0=qt.basis([2], [1]),
        description=f"A basic near-markovian, weakly coupled Otto Cycle that actually works.",
        k_max=4,
        bcf_terms=[6] * 2,
        truncation_scheme="simplex",
        driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
        thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
        T=[1, 10],
        therm_methods=["tanhsinh", "tanhsinh"],
        Î”=1,
        num_cycles=5,
        Î˜=1.5 / 0.05,
        dt=0.001,
        timings_H=(0, 0.1, 0.5, 0.6),
        timings_L=((0.6, 0.7, 0.9, 1), (0.1, 0.2, 0.4, 0.5)),
        streaming_mode=True,
      shift_to_resonance=(False, False),
        # solver_args=dict(rtol=1e-3, atol=1e-3)
    )
  ot.plot_cycle(model)
#+end_src
#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/acddb332ae845425647d38aa9f7101a642cf4b0e.svg]]
:END:


#+begin_src jupyter-python
  ot.plot_sd_overview(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\omega$ | ylabel= | Spectral Density | > |
[[file:./.ob-jupyter/4839b4ab9e0d0198f864dfb8c5bcbdae241a15ad.svg]]
:END:


#+begin_src jupyter-python :tangle no
  ot.integrate_online(model, 5000)
#+end_src


** Results
:PROPERTIES:
:header-args:  :session baseline_noshift_res :noweb yes :async yes
:END:

#+begin_src jupyter-python
  import otto_utilities as ot
  import plot_utils as pu
  from baseline_noshift import model, model_fft

  ot.plot_energy(model)
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/4f57719ec56b5d4bcdc1e6c3e2884c37afb8eb35.svg]]
[[file:./.ob-jupyter/67ffcf01a06dcb88c0db99a3f8ae2bc06cda31b0.svg]]
:END:


#+begin_src jupyter-python
  f, a = plt.subplots()
  for bath in range(2):
      pu.plot_with_Ïƒ(model_fft.t, model_fft.bath_energy_flow().for_bath(bath), ax=a)
      pu.plot_with_Ïƒ(model.t, model.bath_energy_flow().for_bath(bath), ax=a)

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6f685aff0228e4808b573eb24237f728897c4bfb.svg]]


#+begin_src jupyter-python
  import numpy as np

  t = np.linspace(0, 1, 100)

  f, a = plt.subplots()

  for m in [model, model_fft]:
      total = np.zeros_like(t, dtype=complex)
      N = 10_000
      proc = m.thermal_process(1)
      proc.calc_deriv = True
      for _ in range(N):
          proc.new_process()
          total += proc.dot(t).conjugate() * proc(0)

      pu.plot_complex(t, total.conj() / N, ax=a)

  #pu.plot_complex(t, np.gradient(np.gradient(model.thermal_correlations(1)(t), t), t)/ 4, ax=a)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3d5ba68b7cd6f8a9ccd027aeebc434cb64bd1986.svg]]

* Tangent: FFT vs TanhSinh
:PROPERTIES:
:header-args: :tangle baseline_noshift.py :session baseline_noshift :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output but without resonance.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  model = OttoEngine(
      Î´=[0.4, 0.4],
      Ï‰_c=[2, 2],
      Ïˆ_0=qt.basis([2], [1]),
      description=f"A basic near-markovian, weakly coupled Otto Cycle without the shift.",
      k_max=3,
      bcf_terms=[4] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      T=[0, 2],
      therm_methods=["tanhsinh", "tanhsinh"],
      Î”=1,
      num_cycles=1,
      Î˜=1.5 / 0.05,
      dt=0.001,
      timings_H=(0, 0.1, 0.5, 0.6),
      timings_L=((0.6, 0.7, 0.9, 1), (0.1, 0.2, 0.4, 0.5)),
      streaming_mode=True,
      shift_to_resonance=(False, False),
      #Ï‰_s_extra=[.1, .1],
  )

  model_fft = model.copy()
  model_fft.therm_methods = ["fft", "fft"]

  ot.plot_cycle(model)
#+end_src
#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/5d0bad2e6ef80abb8d60c2cbff3786dd01ebf25e.svg]]
:END:


#+begin_src jupyter-python
  ot.plot_sd_overview(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\omega$ | ylabel= | Spectral Density | > |
[[file:./.ob-jupyter/914137aa7a7a69ca970157064773bfe0d273e743.svg]]
:END:


#+begin_src jupyter-python :tangle no
  ot.integrate_online(model_fft, 5000)
  ot.integrate_online(model, 5000)
#+end_src

#+RESULTS:
#+begin_example
  [INFO    hops.core.integration     1570847] Choosing the nonlinear integrator.
  [INFO    root                      1570847] Starting analysis process.
  [INFO    root                      1570847] Started analysis process with pid 1576372.
  [INFO    hops.core.hierarchy_data  1570847] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_d3093039d2e9ab9d02aab76a07b979a7141942b32be1e00a2055e9308033416a.fifo
  [INFO    hops.core.integration     1570847] Using 32 integrators.
  [INFO    hops.core.integration     1570847] Some 3958 trajectories have to be integrated.
  [INFO    hops.core.integration     1570847] Using 165 hierarchy states.
  100% 3958/3958 [16:07<00:00,  4.09it/s]
  [INFO    hops.core.integration     1570847] Choosing the nonlinear integrator.
  [INFO    root                      1570847] Starting analysis process.
  [INFO    root                      1570847] Started analysis process with pid 1581080.
  [INFO    hops.core.hierarchy_data  1570847] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_dc05b28e7c3cc07088dd643d6d07bdeebe680b41c0cb58d7c9e0893d182e483a.fifo
  [INFO    hops.core.integration     1570847] Using 32 integrators.
  [INFO    hops.core.integration     1570847] Some 4000 trajectories have to be integrated.
  [INFO    hops.core.integration     1570847] Using 165 hierarchy states.
100% 4000/4000 [16:30<00:00,  4.04it/s]
#+end_example


** Results
:PROPERTIES:
:header-args:  :session baseline_noshift_res :noweb yes :async yes
:END:

#+begin_src jupyter-python
  import otto_utilities as ot
  import plot_utils as pu
  from baseline_noshift import model, model_fft

  ot.plot_energy(model)
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/4f57719ec56b5d4bcdc1e6c3e2884c37afb8eb35.svg]]
[[file:./.ob-jupyter/67ffcf01a06dcb88c0db99a3f8ae2bc06cda31b0.svg]]
:END:


#+begin_src jupyter-python
  f, a = plt.subplots()
  for bath in range(2):
      pu.plot_with_Ïƒ(model_fft.t, model_fft.bath_energy_flow().for_bath(bath), ax=a)
      pu.plot_with_Ïƒ(model.t, model.bath_energy_flow().for_bath(bath), ax=a)

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6f685aff0228e4808b573eb24237f728897c4bfb.svg]]


#+begin_src jupyter-python
  import numpy as np

  t = np.linspace(0, 1, 100)

  f, a = plt.subplots()

  for m in [model, model_fft]:
      total = np.zeros_like(t, dtype=complex)
      N = 10_000
      proc = m.thermal_process(1)
      proc.calc_deriv = True
      for _ in range(N):
          proc.new_process()
          total += proc.dot(t).conjugate() * proc(0)

      pu.plot_complex(t, total.conj() / N, ax=a)

  #pu.plot_complex(t, np.gradient(np.gradient(model.thermal_correlations(1)(t), t), t)/ 4, ax=a)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3d5ba68b7cd6f8a9ccd027aeebc434cb64bd1986.svg]]

* Scans
In this section we run some parameter scans on the otto cycle.

** Switching Speed
:PROPERTIES:
:header-args: :tangle speed_coupling_scan.py :session speed_coupling_scan :noweb yes :async yes
:END:
Inspired by cite:Wiedmann2020Mar, we will begin with a scan of coupling strength vs coupling switching speed.

*** Model
A basic otto cycle that has a finite power output but without resonance.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  def timings(Ï„_c, Ï„_i):
      Ï„_th = (1 - 2 * Ï„_c) / 2
      Ï„_i_on = (Ï„_th - 2*Ï„_i)
      timings_H = (0, Ï„_c, Ï„_c + Ï„_th, 2*Ï„_c + Ï„_th)
      timings_L_hot = (Ï„_c, Ï„_c + Ï„_i, Ï„_c + Ï„_i + Ï„_i_on, Ï„_c + 2 * Ï„_i + Ï„_i_on)

      timings_L_cold = tuple(time + timings_H[2] for time in timings_L_hot)

      return timings_H, (timings_L_cold, timings_L_hot)
#+end_src

#+RESULTS:


- no shift, to keep things simple

#+begin_src jupyter-python
  (p_H, p_L) = timings(0.1, 0.3)
  prototype = OttoEngine(
      Î´=[0.4, 0.4],
      Ï‰_c=[2, 2],
      Ïˆ_0=qt.basis([2], [1]),
      description=f"A model for scanning coupling strength and interactin switch times.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      T=[1, 4],
      therm_methods=["tanhsinh", "tanhsinh"],
      Î”=1,
      num_cycles=5,
      Î˜=1.5 / 0.05,
      dt=0.01/5,
      timings_H=p_H,
      timings_L=p_L,
      streaming_mode=True,
      shift_to_resonance=(False, False),
  )

#+end_src

#+RESULTS:

*** Scan Definition
As hamiltonian switching is not very interesting per-se, as it is
diagonal and directly translates into addional power vs longer
coupling we change the switching speed of the interaction and the coupling strength.


#+begin_src jupyter-python
  Î´s = np.round(np.linspace(.3, .5, 3), 3)
  Ï„_Is = np.round(np.linspace(.01, .3, 3), 3)
  Ï„_Is
#+end_src

#+RESULTS:
: array([0.01 , 0.155, 0.3  ])

#+begin_src jupyter-python
  models = []

  import itertools

  for Ï„_I, Î´ in itertools.product(Ï„_Is, Î´s):
      (p_H, p_L) = timings(0.1, Ï„_I)

      model = prototype.copy()
      model.Î´ = [Î´, Î´]
      model.timings_H = p_H
      model.timings_L = p_L
      models.append(model)


  ot.plot_cycles(models[:: len(Î´s)])
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/e523be7372b5ff485486fc45675e5b909236cd1a.svg]]
:END:

*** Integration
:PROPERTIES:
:header-args: :tangle speed_coupling_integration.py :session speed_coupling_integration :noweb yes :async yes
:END:

#+begin_src jupyter-python
  from speed_coupling_scan import *

  ot.integrate_online_multi(models, 30)
#+end_src

#+RESULTS:
#+begin_example
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1622138.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_1dc8c283ae780328a30ecbf32a23e06b14036027991ff24316228cb36d1b4945.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 0 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
  0it [00:00, ?it/s]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1622143.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_d30d711ff9941f452949b6687f0d65e2c8596cd1bd966f351bd44893b38ed6cc.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:04<00:00,  2.16s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1622904.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_3078e0270324c2117d454140522b004ece6981829ee14877bef0fb77f57cba19.fifo
  [INFO    hops.core.integration     1613157] Using 31 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [00:56<00:00,  1.88s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1623127.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_dd47ec9271fca79dcc73eef99399d2467bf926b0dd190c3ed4fc72282733124a.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:01<00:00,  2.04s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1623393.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_d5b0e9f8818e88200975a5d384e0a9c4945a35ad6b1a38f283ec2f0fe7a01d7f.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:01<00:00,  2.06s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1623611.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_96bf5679dd97e33f459e5fff6f6a4a56c12673121be09900fa51237de9c358f3.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:00<00:00,  2.01s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1623830.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_e36d79668e6a3cec1b70fe38ecf5b02eee25be9ee013bac78d38de4aa75d20df.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:03<00:00,  2.11s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1624016.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_2009a17bd9369ce31a989ea0ff41781580c4955bf36879d0dc985c2dd83bca56.fifo
  [INFO    hops.core.integration     1613157] Using 32 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:01<00:00,  2.04s/it]
  [INFO    hops.core.integration     1613157] Choosing the nonlinear integrator.
  [INFO    root                      1613157] Starting analysis process.
  [INFO    root                      1613157] Started analysis process with pid 1624258.
  [INFO    hops.core.hierarchy_data  1613157] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_9691c39a98410a756834442e8a29d970fc185f3f951ae49fe836b30c520597f1.fifo
  [INFO    hops.core.integration     1613157] Using 31 integrators.
  [INFO    hops.core.integration     1613157] Some 30 trajectories have to be integrated.
  [INFO    hops.core.integration     1613157] Using 1820 hierarchy states.
100% 30/30 [01:02<00:00,  2.07s/it]
#+end_example

*** Analysis
:PROPERTIES:
:header-args: :tangle no :session speed_coupling_analysis :noweb yes :async yes
:END:

#+begin_src jupyter-python
  from speed_coupling_scan import *
#+end_src

#+RESULTS:

**** Import from taurus
#+begin_src bash :results none
  umount taurus
  sshfs s4498638@taurusexport.hrsk.tu-dresden.de:/beegfs/ws/0/s4498638-paper_otto/project/python/otto_motor/ taurus
#+end_src

#+begin_src jupyter-python
  taurus_path = "taurus"
  from hiro_models.model_auxiliary import import_results
  import_results(other_data_path="./taurus/.data", other_results_path="./taurus/results", interactive=False, models_to_import=models)
#+end_src

**** Plots
#+begin_src jupyter-python
  f, a = plt.subplots()

  for model in models:
      try:
          pu.plot_with_Ïƒ(model.t, model.total_energy().sum_baths(), ax=a, label=fr"$\delta={model.Î´[0]}$, $\tau_I={model.timings_L[0][1] - model.timings_L[0][0]:.3}$")
      except:
          pass
  a.legend()
#+end_src

#+RESULTS:
: <matplotlib.legend.Legend at 0x7fe8b5dca970>



#+begin_src jupyter-python
  %matplotlib tk
  import random
  powers = []
  for model in models:
      try:
          powers.append(-model.power().value)
      except:
          powers.append(0.)
  #powers = np.array([model.power().value for model in models])
  #powers = np.array([random.random() for model in models])
  powers = np.nan_to_num(np.array(powers))
  normalized_powers = powers - powers.min()
  normalized_powers /= normalized_powers.max()
  Blues = plt.get_cmap("plasma")
  colors = [Blues(power) for power in normalized_powers]
  ax1 = plt.gcf().add_subplot(111, projection='3d')

  _xx, _yy = np.meshgrid(Î´s, Ï„_Is)
  x, y = _xx.ravel(), _yy.ravel()
  dx = (Î´s[1] - Î´s[0])
  dy = (Ï„_Is[1] - Ï„_Is[0])
  x -= dx /2
  y -= dy /2
  ax1.bar3d(x, y, np.zeros_like(powers), dx, dy, powers, color=colors)
  ax1.set_xticks(Î´s)
  ax1.set_yticks(Ï„_Is)

  ax1.set_xlabel(r"$\delta$")
  ax1.set_ylabel(r"$\tau_I$")
  ax1.set_zlabel(r"$P$")
#+end_src

#+RESULTS:
: Text(0.5, 0, '$P$')

** Coupling and System Switching overlap
:PROPERTIES:
:header-args: :tangle timing_scan.py :session timing_scan :noweb yes :async yes
:END:
Let's see if it helps switching system and interaction at the same time.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  def timings(Ï„_c, Ï„_i, percent_overlap=0):
      Ï„_cI = Ï„_c * (1-percent_overlap)

      Ï„_thI = (1 - 2 * Ï„_cI) / 2
      Ï„_th = (1 - 2 * Ï„_c) / 2
      Ï„_i_on = (Ï„_thI - 2*Ï„_i)
      timings_H = (0, Ï„_c, Ï„_c + Ï„_th, 2*Ï„_c + Ï„_th)

      timings_L_hot = (Ï„_cI, Ï„_cI + Ï„_i, Ï„_cI + Ï„_i + Ï„_i_on, Ï„_cI + 2 * Ï„_i + Ï„_i_on)

      timings_L_cold = tuple(time + timings_H[2] for time in timings_L_hot)

      return timings_H, (timings_L_cold, timings_L_hot)
#+end_src

#+RESULTS:


- no shift, to keep things simple

#+begin_src jupyter-python
  Ï„_mod, Ï„_I = 0.1, 0.1
  (p_H, p_L) = timings(Ï„_mod, Ï„_I, .5)
  prototype = OttoEngine(
      Î´=[0.4, 0.4],
      Ï‰_c=[2, 2],
      Ïˆ_0=qt.basis([2], [1]),
      description=f"A model for scanning coupling strength and interactin switch times.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      T=[1, 4],
      therm_methods=["tanhsinh", "tanhsinh"],
      Î”=1,
      num_cycles=4,
      Î˜=1.5 / 0.05,
      dt=0.001,
      timings_H=p_H,
      timings_L=p_L,
      streaming_mode=True,
      shift_to_resonance=(False, False),
      L_shift=(0.0, 0.0),
  )
  ot.plot_cycle(prototype)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/715f1a84b193dcb92aee672f411246fbee3b5508.svg]]
:END:


Ok we control the overlap and the timing while staying in the region
where the baths are not coupled at the same time.

#+begin_src jupyter-python
  overlaps = np.round(np.linspace(0, 1, 3), 3)
  shifts = np.round(np.linspace(0, Ï„_mod, 3), 3)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  models = []

  import itertools

  for overlap, shift in itertools.product(overlaps, shifts):
      (p_H, p_L) = timings(Ï„_mod, Ï„_I, overlap)

      model = prototype.copy()
      model.timings_H = p_H
      model.timings_L = p_L
      model.L_shift = (shift, shift)
      models.append(model)


  ot.plot_cycles(models)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/b7d97662c04862a559dcd4bdfee83e64c2691b1a.svg]]
:END:

*** Integration
:PROPERTIES:
:header-args: :tangle timing_scan_integration.py :session timing_scan_integration :noweb yes :async yes
:END:

#+begin_src jupyter-python
  from timing_scan import *

  ot.integrate_online_multi(models, 1000)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3097148.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_0ae2ca3483c49a2a1c0280dfc0f2ac52460f12201bc7e679f25b690ffc867a77.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 0 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
    0it [00:00, ?it/s]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3097154.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_c4ffcc018e0fad01ca35903f166e03ae3e28215d7e8b4f2a8d3a22e69a69866f.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 0 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  0it [00:00, ?it/s]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3097159.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_b5d2774406d4926e3037f019b1d286baecda88125439768183d77b62be9e485d.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 553 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 553/553 [26:21<00:00,  2.86s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3101150.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_4759cede806dea32e6115a827b2d33e52a66f8d18f40f512f534b5475c8caef0.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [45:21<00:00,  2.81s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3107760.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_1410bb9ebb987280f2d2208c1e47a2619f8f6572d2d0a3ce20aadd16776fc3d0.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [46:07<00:00,  2.85s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3114351.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_736a1897845d638b4f3bc296842933aa936337ead26304ee13fa3b29d5c071b3.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [45:46<00:00,  2.83s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3120948.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_bb3025682df8d676d76e6202a3c5a8fb9381a50cc1ae8da56f38745376ee30c4.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [44:57<00:00,  2.78s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3127516.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_7a917c6d6fc01ab8a539cf0be9f0d315e9317bbe51674ee673e74760e35e3531.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [45:00<00:00,  2.78s/it]
    [INFO    hops.core.integration     3096512] Choosing the nonlinear integrator.
    [INFO    root                      3096512] Starting analysis process.
    [INFO    root                      3096512] Started analysis process with pid 3134106.
    [INFO    hops.core.hierarchy_data  3096512] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_ff8373ff48a0ea02cd400a513eb5ce08ea239178a58fb926260ee433554fab6a.fifo
    [INFO    hops.core.integration     3096512] Using 16 integrators.
    [INFO    hops.core.integration     3096512] Some 970 trajectories have to be integrated.
    [INFO    hops.core.integration     3096512] Using 1820 hierarchy states.
  100% 970/970 [45:04<00:00,  2.79s/it]
#+end_example
[[file:./.ob-jupyter/4a2358e0dc247a8d9328ce80db6ada045da1614b.svg]]
[[file:./.ob-jupyter/31c7c50f104e5fe8f7efe4f6fe4d37100bd9d4ad.svg]]
:END:

#+begin_src jupyter-python
  f, a = plt.subplots()
  powers = []
  for model in models:
      pu.plot_with_Ïƒ(model.t, model.total_power(), ax=a)
      #print(model.power().value, model.efficiency().value)
      powers.append(model.total_power().value.max())

  plt.matshow(np.array(powers).reshape((3,3)))
#+end_src

#+RESULTS:
:RESULTS:
: <matplotlib.image.AxesImage at 0x7fb863798a30>
[[file:./.ob-jupyter/71231b5ed5743908c56def5e94cc3edf780ea9c1.svg]]
[[file:./.ob-jupyter/2a19804a1b0b621776af79982521674ceeb6284d.svg]]
:END:

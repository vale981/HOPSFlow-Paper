#+PROPERTY: header-args :session otto_baseline :kernel python :pandoc no :async yes :tangle otto_baseline.py

* Boilerplate
#+name: boilerplate
#+begin_src jupyter-python :results none
    import figsaver as fs
    import plot_utils as pu
    from hiro_models.one_qubit_model import StocProcTolerances
    from hiro_models.otto_cycle import OttoEngine
    import hiro_models.model_auxiliary as aux
    import numpy as np
    import qutip as qt
    import utilities as ut
    import stocproc
    import matplotlib.pyplot as plt
    import otto_utilities as ot

    import ray
    ray.shutdown()

    ray.init(address='auto')
    #ray.init()
    from hops.util.logging_setup import logging_setup
    import logging
    logging_setup(logging.INFO)
    plt.rcParams['figure.figsize'] = (12,4)
#+end_src

* Model: Baseline
:PROPERTIES:
:header-args: :tangle baseline.py :session baseline :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  model = OttoEngine(
      δ=[0.4, 0.4],
      ω_c=[1, 1],
      ψ_0=qt.basis([2], [1]),
      description=f"A basic near-markovian, weakly coupled Otto Cycle that actually works.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      T=[1, 10],
      therm_methods=["tanhsinh", "fft"],
      Δ=1,
      num_cycles=5,
      Θ=1.5 / 0.05,
      dt=0.001,
      timings_H=(0, 0.1, 0.5, 0.6),
      timings_L=((0.6, 0.7, 0.9, 1), (0.1, 0.2, 0.4, 0.5)),
      streaming_mode=True,
  )

  ot.plot_cycle(model)
#+end_src
#+RESULTS:
: [INFO    hops.core.integration     143440] Choosing the nonlinear integrator.
: [INFO    root                      143440] Starting analysis process.
: [INFO    root                      143440] Started analysis process with pid 167240.
: [INFO    hops.core.hierarchy_data  143440] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_cd3f8b0097f9c534dcf1ae820df84eb5360444c29eda1ab03060ef82aad20742.fifo
: [INFO    hops.core.integration     143440] Using 16 integrators.
: [INFO    hops.core.integration     143440] Some 0 trajectories have to be integrated.
: [INFO    hops.core.integration     143440] Using 1820 hierarchy states.
: 0it [00:00, ?it/s]

#+begin_src jupyter-python
  ot.full_report(model)
#+end_src
:RESULTS:
: \(P=-0.002945\pm 0.000029\)
: \(\eta=30.1\pm 0.5\)
[[file:./.ob-jupyter/c61e413e66aa7df116b897a2723935020b1c53fe.svg]]
[[file:./.ob-jupyter/f18ff8e0fb663c3f8ce0d8e0e9251800ed28866d.svg]]
: \(P=-0.002945\pm 0.000029\)
: \(\eta=30.1\pm 0.5\)
[[file:./.ob-jupyter/c532a1d8126a94546c4caacf30830a3abaf9791d.svg]]
: \(P=-0.002945\pm 0.000029\)
: \(\eta=30.1\pm 0.5\)
[[file:./.ob-jupyter/a87593e3ba9c2f50c02156f48c3d9f472939165e.svg]]
:END:

* Model: Baseline, continously coupled
:PROPERTIES:
:header-args: :tangle baseline_cc.py :session baseline_cc :noweb yes :async yes
:END:

A basic otto cycle that has a finite power output without coupling modulation.

#+begin_src jupyter-python
  <<boilerplate>>
#+end_src

#+RESULTS:
: 2022-12-02 17:22:15,922       INFO worker.py:956 -- Connecting to existing Ray cluster at address: 10.0.0.102:6379

#+begin_src jupyter-python
  model = OttoEngine(
      δ=[0.4, 0.4],
      ω_c=[1, 1],
      ψ_0=qt.basis([2], [1]),
      description=f"A basic near-markovian, weakly coupled Otto Cycle that actually works.",
      k_max=4,
      bcf_terms=[6] * 2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-4, 1e-4)] * 2,
      T=[1, 10],
      therm_methods=["tanhsinh", "fft"],
      Δ=1,
      num_cycles=5,
      Θ=1.5 / 0.05,
      dt=0.001,
      timings_H=(0, 0.1, 0.5, 0.6),
      timings_L=(None, None),
      streaming_mode=True,
  )

  ot.plot_cycle(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Operator Norm | > |
[[file:./.ob-jupyter/d4e495d3d874fb283bf7adb54b752ec1c1c8a942.svg]]
:END:


#+begin_src jupyter-python
  ot.integrate_online(model, 5000)
#+end_src

#+RESULTS:
: [INFO    hops.core.integration     211210] Choosing the nonlinear integrator.
: [INFO    root                      211210] Starting analysis process.
: [INFO    root                      211210] Started analysis process with pid 630343.
: [INFO    hops.core.hierarchy_data  211210] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results_fea83562df42901b66a85396f98a6c69d504e3a6d3dcc59cb83c5f34ec4077ca.fifo
: [INFO    hops.core.integration     211210] Using 32 integrators.
: [INFO    hops.core.integration     211210] Some 0 trajectories have to be integrated.
: [INFO    hops.core.integration     211210] Using 1820 hierarchy states.
: 0it [00:00, ?it/s]

** Results
:PROPERTIES:
:header-args:  :session baseline_cc_res :noweb yes :async yes
:END:

#+begin_src jupyter-python
    import otto_utilities as ot
    from baseline_cc import model

    ot.plot_energy(model)
#+end_src

#+RESULTS:
:RESULTS:
| <Figure | size | 1200x400 | with | 1 | Axes> | <AxesSubplot: | xlabel= | $\tau$ | ylabel= | Energy | > |
[[file:./.ob-jupyter/3d98e3c75769ff8d11e9b3abd5b106b72bef0b1a.svg]]
:END:


#+begin_src jupyter-python
  model.efficiency(), model.power()
#+end_src

#+RESULTS:
| EnsembleValue | (((5000 0.013166547143407361 0.0005796013132630898))) | EnsembleValue | (((5000 -0.0004882838891758121 2.125229382647311e-05))) |


#+begin_src jupyter-python
    ot.full_report(model)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5c70edfc7d22c62cc00936a4152948a0b6a9a1db.svg]]
:RESULTS:
: \(P=-0.000488\pm 0.000021\)
: \(\eta=1.32\pm 0.06\)
[[file:./.ob-jupyter/5d6803828c5f069e1abeeca5906cf627ec1a0720.svg]]
[[file:./.ob-jupyter/d0ac6d4dccf574add7cb85f8a9a8e302e8e13e1a.svg]]
:END:

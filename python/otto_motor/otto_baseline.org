#+PROPERTY: header-args :session otto_baseline :kernel python :pandoc no :async yes :tangle otto_baseline.py

* Boilerplate
#+begin_src jupyter-python :results none
  import figsaver as fs
  import plot_utils as pu
  from hiro_models.one_qubit_model import StocProcTolerances
  from hiro_models.otto_cycle import OttoEngine
  import hiro_models.model_auxiliary as aux
  import numpy as np
  import qutip as qt
  import utilities as ut
  import stocproc
  import matplotlib.pyplot as plt
#+end_src

Init ray and silence stocproc.
#+begin_src jupyter-python
  import ray
  ray.shutdown()
  #ray.init(address='auto')
  ray.init()
#+end_src

#+RESULTS:
: RayContext(dashboard_url='', python_version='3.9.15', ray_version='1.13.0', ray_commit='e4ce38d001dbbe09cd21c497fedd03d692b2be3e', address_info={'node_ip_address': '10.0.0.102', 'raylet_ip_address': '10.0.0.102', 'redis_address': None, 'object_store_address': '/tmp/ray/session_2022-11-30_18-22-21_330665_940019/sockets/plasma_store', 'raylet_socket_name': '/tmp/ray/session_2022-11-30_18-22-21_330665_940019/sockets/raylet', 'webui_url': '', 'session_dir': '/tmp/ray/session_2022-11-30_18-22-21_330665_940019', 'metrics_export_port': 56187, 'gcs_address': '10.0.0.102:49774', 'address': '10.0.0.102:49774', 'node_id': '657606fac86410cf9d4a663984fdd108bb4ed71b2bad5450c38f8c7e'})

#+begin_src jupyter-python :results none
  from hops.util.logging_setup import logging_setup
  import logging
  logging_setup(logging.INFO)
  plt.rcParams['figure.figsize'] = (16,8)
#+end_src

* Model
#+begin_src jupyter-python
  model = OttoEngine(
      δ=[.4, .4],
      ω_c=[1, 1],
      ψ_0=qt.basis([2], [1]),
      description=f"An otto cycle on the way to finding the baseline.",
      k_max=2,
      bcf_terms=[4]*2,
      truncation_scheme="simplex",
      driving_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      thermal_process_tolerances=[StocProcTolerances(1e-3, 1e-3)] * 2,
      T = [1, 10],
      therm_methods=["tanhsinh", "fft"],
      Δ=1,
      num_cycles=2,
      Θ=1/.05,
      dt=.001,
      timings_H=(0, .1, .5, .6),
      timings_L=((.6, .7, .9, 1), (.1, .2, .4, .5)),
      streaming_mode=False,
  )
#+end_src

#+RESULTS:


#+begin_src jupyter-python
  plt.plot(model.t, model.H.operator_norm(model.t) - 1, label="H")
  plt.plot(model.t, model.coupling_operators[0].operator_norm(model.t) * 2, label="cold")
  plt.plot(model.t, model.coupling_operators[1].operator_norm(model.t) * 2, label="hot")
  plt.legend()
#+end_src

#+RESULTS:
:RESULTS:
: <matplotlib.legend.Legend at 0x7f54bb66adc0>
[[file:./.ob-jupyter/d7bd2c56390fb3ec523d13fc0181d1950f7b648e.svg]]
:END:

#+begin_src jupyter-python
  ω = np.linspace(.01, 3, 1000)
  plt.plot(ω, model.full_thermal_spectral_density(0)(ω) * model.bcf_scales[0])
  plt.plot(1, model.full_thermal_spectral_density(0)(1) * model.bcf_scales[0], marker="o")
  plt.plot(ω, model.full_thermal_spectral_density(1)(ω) * model.bcf_scales[1])
  plt.plot(2, model.full_thermal_spectral_density(1)(2) * model.bcf_scales[1], marker="o")
#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7f54bb3ddb20> |
[[file:./.ob-jupyter/be78ac186f304311876954db3750ae94b1ef6728.svg]]
:END:

* Integration
:LOGBOOK:
CLOCK: [2022-11-30 Wed 16:27]
:END:
#+begin_src jupyter-python :tangle nil
  aux.integrate(model, 10, stream_file="results.fifo", analyze=True, clear_pd=True)
#+end_src

#+RESULTS:
#+begin_example
  [INFO    hops.core.integration     940019] Choosing the nonlinear integrator.
  [INFO    root                      940019] Starting analysis process.
  [INFO    root                      940019] Started analysis process with pid 941154.
  [INFO    hops.core.integration     940019] Clear HIData contained in <HDF5 file "8d54cdc69199dca1476eede05fd6d6e87e72c0b49a612df65420eb7e79931a10_ecd6651f761cdc4399d98c7b9d6cdfe8_1.h5" (mode r+)>
  [INFO    hops.core.hierarchy_data  940019] Creating the streaming fifo at: /home/hiro/Documents/Projects/UNI/master/eflow_paper/python/otto_motor/results.fifo
  [INFO    hops.core.integration     940019] Using 16 integrators.
  [INFO    hops.core.integration     940019] Some 10 trajectories have to be integrated.
  [INFO    hops.core.integration     940019] Using 45 hierarchy states.
  100% 10/10 [00:08<00:00,  1.22it/s]
#+end_example

#+begin_src jupyter-python :tangle nil
  f, a = pu.plot_energy_overview(model, strobe_frequency=model.Ω, hybrid=True, bath_names=["C","H"], online=True)


  a.plot(model.t, model.coupling_operators[0].operator_norm(model.t), linestyle="dashed", label="Mod Cold")
  a.plot(model.t, model.coupling_operators[1].operator_norm(model.t), linestyle="dashed", label="Mod Hot")
  a.plot(model.t, model.H.operator_norm(model.t) - 1, linestyle="dashed", label="Mod H")
  #   a.set_xlabel(r"$\tau$")
  #   a.plot(model.t, model.coupling_operators[0].operator_norm(model.t), label="cold")
  a.legend()
#+end_src

#+RESULTS:
:RESULTS:
: <matplotlib.legend.Legend at 0x7f5461df9220>
[[file:./.ob-jupyter/a0379420b340d130d76aea4bff1bf1aa17bfbd4c.svg]]
:END:
